<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

      <context:component-scan base-package="com.itt"></context:component-scan>

      <!-- 视图解析器-->
      <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
          <property name="prefix" value="/WEB-INF/pages/"/>
          <property name="suffix" value=".jsp"/>
      </bean>


      <!--默认前端控制器是拦截所有的资源(除过jsp),js文件就是404-->
      <!-- 然后告诉SpringMVC，自己映射的请求就自己处理，不能处理的就交给tomcat-->
      <!-- 加上静态资源能访问，动态映射的请求不行-->
      <mvc:default-servlet-handler/>

      <!-- SpringMVC可以保证动态请求和静态请求都能访问-->
      <mvc:annotation-driven/>
      <!-- 发送一个请求(Model/testlogin),直接来到web-inf下的Login页面

      path：指定哪个 请求
      view-name:指定映射给哪个视图

      -->
      <!--<mvc:view-controller path="Model/testlogin" view-name="login"/>-->

</beans>